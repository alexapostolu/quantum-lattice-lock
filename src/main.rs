use std::io::{self, Write};
use rand::Rng;
use rand::rngs::OsRng;

struct Lattice {
	dimensions: u16,
    private_vectors: Vec<Vec<f64>>
}

impl Lattice {
    fn new(_dimensions: u16) -> Self {
        Lattice {
			dimensions: _dimensions,
            private_vectors: Vec::new(),
        }
    }

    /*
     * Generates two trivial private basis vectors for an 'n' dimensional lattice.
     *
     * The trivial vectors are independent unit vectors that are generated by
     * converting random angles from polar form into rectangular form.
     *
     * @returns both trivial private basis vectors. 
     */
    fn generate_private_vectors(&mut self)
	{
        let mut rng = OsRng;

        self.private_vectors = (0..self.dimensions)
            .map(|_| {
                (0..self.dimensions)
                    .map(|_| rng.gen_range(-10.0..=10.0))
                    .collect()
            })
            .collect();

        for v in self.private_vectors.iter_mut() {
            let magnitude = (v.iter().map(|x| x.powi(2)).sum::<f64>()).sqrt();
            if magnitude > 0.0 {
                for x in v.iter_mut() {
                    *x /= magnitude;
                }
            }
        }
    }

    /*
     * Generates two non-trivial basis vectors for a lattice specified by the
     * given private trivial basic vectors.
     *
     * @returns both non-trivial public vectors
     */
	 fn generate_public_vectors(&self) -> Vec<Vec<f64>>
	 {
        let mut rng = OsRng;
        let scalar = rng.gen_range(500.0..=1000.0);

        self.private_vectors
            .iter()
            .map(|v| {
                v.iter()
                    .map(|&x| x * scalar)
                    .collect()
            })
            .collect()
    }
}

// /*
//  * Encodes the binary representation of the message amongst the lattice
//  * specified by the public basis vectors.
//  *
//  * @returns the position
//  */
// fn encode_message(&(::Vec<i32>, ::Vec<i32>))
// {

// }

fn main()
{
	let mut my_lattice = Lattice::new(2);
	my_lattice.generate_private_vectors();

	let pub_vecs = my_lattice.generate_public_vectors();
	println!("public vectors: {:?}", pub_vecs);

	let mut input = String::new();
	io::stdin().read_line(&mut input);

	println!("private vectors: {:?}", my_lattice.private_vectors);
}